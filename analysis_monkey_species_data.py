# -*- coding: utf-8 -*-
"""analysis-monkey-species-data

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gZrU___vVXzhb2PN5cq8ZyLFdZHyfi7c

```
                                                  ✨ Dayane Ramos✨
```

```#Definição das Espécies de Macacos e Categorias```

A lista *monkey_species* contém os nomes de várias espécies de macacos, enquanto o dicionário categories agrupa essas espécies em três categorias: 'grandes_primatas', 'macacos_medio_porte' e 'macacos_pequenos_lemures'.

```
>Função para Geração de Dados
```
    A função generate_monkey_data é usada para gerar dados aleatórios para cada espécie de macaco. Esses dados incluem peso, altura, expectativa de vida, tamanho do grupo, área de distribuição e dieta. Os valores são gerados com base na categoria a que a espécie pertence.
"""

import pandas as pd
import random
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from google.colab import files

# Definindo uma seed para reprodutibilidade
random.seed(42)

# Lista de espécies de macaco
monkey_species = [
    "Macaco-prego", "Macaco-aranha", "Bugio", "Sagui", "Mandril",
    "Macaco-de-cheiro", "Macaco-rhesus", "Capuchinho", "Gibão",
    "Orangotango", "Chimpanzé", "Gorila", "Bonobo",
    "Macaco-japonês", "Macaco-verde", "Macaco-dourado",
    "Lêmure-de-cauda-anelada", "Lêmure-de-olhos-azuis", "Tarsius",
    "Macaco-narigudo", "Uacari", "Macaco-da-noite",
    "Macaco-de-gibraltar", "Macaco-probóscide", "Macaco-langur",
    "Macaco-colobo", "Macaco-patas", "Macaco-de-diane",
    "Macaco-guigó", "Macaco-howl", "Macaco-de-bonnet",
    "Macaco-rabo-de-porco", "Macaco-dourado-do-naso",
    "Macaco-de-gafanhoto", "Macaco-azul", "Macaco-de-himalaia",
    "Macaco-leão-dourado", "Macaco-lutung", "Macaco-de-crista",
    "Macaco-aranha-marrom", "Macaco-de-bushbaby", "Macaco-pulador",
    "Macaco-da-noite-negro", "Macaco-do-naso", "Macaco-pigmeu",
    "Macaco-prego-de-cara-dourada", "Macaco-aranha-preto", "Macaco-titi",
    "Macaco-dourado", "Macaco-langur-dourado", "Macaco-de-cauda-de-leão",
    "Macaco-babuíno", "Macaco-de-barbicha", "Macaco-capuchinho-de-cabeça-preta",
    "Macaco-dourado-chinês", "Macaco-vermelho", "Macaco-aranha-de-cara-vermelha",
    "Macaco-patas-vermelhas", "Macaco-talapoin", "Macaco-vervet",
    "Macaco-da-selva", "Macaco-saki"
]

# Categorias de macacos
categories = {
    'grandes_primatas': ["Gibão", "Orangotango", "Chimpanzé", "Gorila", "Bonobo"],
    'macacos_medio_porte': ["Macaco-prego", "Macaco-aranha", "Bugio", "Macaco-de-cheiro", "Macaco-rhesus", "Capuchinho", "Macaco-verde", "Macaco-dourado", "Macaco-narigudo", "Uacari", "Macaco-langur", "Macaco-colobo", "Macaco-patas", "Macaco-de-diane", "Macaco-guigó", "Macaco-howl", "Macaco-pigmeu", "Macaco-dourado-do-naso", "Macaco-azul", "Macaco-de-himalaia", "Macaco-lutung", "Macaco-de-crista", "Macaco-pulador", "Macaco-da-noite-negro", "Macaco-do-naso", "Macaco-aranha-preto", "Macaco-titi", "Macaco-dourado", "Macaco-langur-dourado", "Macaco-de-cauda-de-leão", "Macaco-babuíno", "Macaco-de-barbicha", "Macaco-capuchinho-de-cabeça-preta", "Macaco-dourado-chinês", "Macaco-vermelho", "Macaco-aranha-de-cara-vermelha", "Macaco-patas-vermelhas", "Macaco-talapoin", "Macaco-vervet", "Macaco-da-selva", "Macaco-saki"],
    'macacos_pequenos_lemures': ["Sagui", "Mandril", "Macaco-japonês", "Lêmure-de-cauda-anelada", "Lêmure-de-olhos-azuis", "Tarsius", "Macaco-guigó", "Macaco-howl", "Macaco-de-bonnet", "Macaco-rabo-de-porco", "Macaco-de-gafanhoto", "Macaco-leão-dourado", "Macaco-aranha-marrom", "Macaco-de-bushbaby"]
}

# Função para gerar dados aleatórios baseados no tipo de macaco
def generate_monkey_data(specie):
    if specie in categories['grandes_primatas']:
        weight = round(random.uniform(40, 200), 2)
        height = round(random.uniform(80, 180), 2)
        life_expectancy = round(random.uniform(30, 60), 2)
        group_size = random.randint(5, 50)
        distribution_area = random.randint(1000, 10000)
        diet = "Onivora"
    elif specie in categories['macacos_medio_porte']:
        weight = round(random.uniform(5, 30), 2)
        height = round(random.uniform(40, 100), 2)
        life_expectancy = round(random.uniform(15, 40), 2)
        group_size = random.randint(10, 100)
        distribution_area = random.randint(100, 5000)
        diet = random.choice(["Frugivora", "Onivora", "Herbivora"])
    else:
        weight = round(random.uniform(0.1, 5), 2)
        height = round(random.uniform(10, 40), 2)
        life_expectancy = round(random.uniform(5, 15), 2)
        group_size = random.randint(5, 30)
        distribution_area = random.randint(10, 500)
        diet = random.choice(["Frugivora", "Insetivora", "Herbivora"])

    return [specie, weight, height, life_expectancy, group_size, distribution_area, diet]

# Gerando os dados para cada espécie de macaco
monkey_data = [generate_monkey_data(specie) for specie in monkey_species]

# Criando um DataFrame com os dados
monkey_df = pd.DataFrame(monkey_data, columns=["Especie", "Peso (kg)", "Altura (cm)", "Expectativa de Vida (anos)", "Tamanho do Grupo", "Area de Distribuição (km²)", "Dieta"])

# Mostrando as primeiras linhas do DataFrame para entender a estrutura dos dados
monkey_df.head()

# Salvando o DataFrame em um arquivo CSV
csv_filename = "monkey_species_data.csv"
monkey_df.to_csv(csv_filename, index=False)

# Baixando o arquivo CSV
files.download(csv_filename)

"""```#Criação de Variáveis Binárias a Partir de Dados Numéricos```

Nesta seção, transformamos o conjunto de dados de espécies de macacos adicionando variáveis binárias que fornecem informações adicionais com base nos dados numéricos existentes. Uma variável binária (ou variável dummy) assume o valor de 1 se uma determinada condição for atendida e 0 caso contrário (true ou false).

"""

# Criando variáveis binárias a partir de dados numéricos
df_monkeys_transformed = monkey_df.copy()

# Exemplo: Criando uma variável binária para indicar se a expectativa de vida é acima da média
average_lifespan = monkey_df['Expectativa de Vida (anos)'].mean()
df_monkeys_transformed['Expectativa de Vida Acima da Média'] = monkey_df['Expectativa de Vida (anos)'] > average_lifespan

# Exemplo: Criando uma variável binária para indicar se o peso é acima da média
average_weight = monkey_df['Peso (kg)'].mean()
df_monkeys_transformed['Peso Acima da Média'] = monkey_df['Peso (kg)'] > average_weight

# Exemplo: Criando uma variável binária para indicar se o tamanho do grupo é acima da média
average_group_size = monkey_df['Tamanho do Grupo'].mean()
df_monkeys_transformed['Tamanho do Grupo Acima da Média'] = monkey_df['Tamanho do Grupo'] > average_group_size

# Mostrando as primeiras linhas do DataFrame transformado
df_monkeys_transformed.head()

"""```#Análise de Clusterização K-Means```

Aqui eu selecionei variáveis numéricas específicas e normalizei seus valores para garantir uma 'escala uniforme'. Em seguida, apliquei o método K-Means para uma variedade de números de clusters (de 1 a 10), calculando a soma dos quadrados dentro dos clusters (WCSS) para cada configuração, e depois visualizei graficamente utilizando k método do cotovelo para identificar o npumero ótimo de clusters
"""

from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler

#selecionando as variáveis numéricas para a clusterização
num_vars = ['Peso (kg)', 'Altura (cm)', 'Expectativa de Vida (anos)', 'Tamanho do Grupo', 'Area de Distribuição (km²)']
df_num = monkey_df[num_vars]

#normalizando os dados
scaler = StandardScaler()
df_num_scaled = pd.DataFrame(scaler.fit_transform(df_num), columns=num_vars)

#encontrando o número ótimo de clusters usando o método do cotovelo
wcss = []  # Within-cluster sum of squares
for i in range(1, 11):
    kmeans = KMeans(n_clusters=i, init='k-means++', max_iter=300, n_init=10, random_state=0)
    kmeans.fit(df_num_scaled)
    wcss.append(kmeans.inertia_)

#plotando o método do cotovelo
plt.figure(figsize=(10, 5))
plt.plot(range(1, 11), wcss, marker='o', linestyle='--')
plt.title('Método do Cotovelo para Escolha do Número de Clusters')
plt.xlabel('Número de Clusters')
plt.ylabel('WCSS')
plt.show()

# Recriando o DataFrame df_monkeys
monkey_data = [generate_monkey_data(specie) for specie in monkey_species]
df_monkeys = pd.DataFrame(monkey_data, columns=["Especie", "Peso (kg)", "Altura (cm)", "Expectativa de Vida (anos)", "Tamanho do Grupo", "Area de Distribuição (km²)", "Dieta"])

# Exibindo as primeiras linhas do DataFrame para confirmar que foi criado corretamente
df_monkeys.head()

"""
```
Exploração visual dos dados para obter alguns insights e identificar padrões ou anomalias que podem não ser imediatamente aparentes apenas analisando os números brutos
```"""

# 1. Distribuição de Peso e Altura
plt.figure(figsize=(10, 6))
sns.scatterplot(data=df_monkeys, x='Peso (kg)', y='Altura (cm)', hue='Dieta', palette='viridis', s=100)
plt.title('Distribuição de Peso e Altura das Espécies de Macacos')
plt.xlabel('Peso (kg)')
plt.ylabel('Altura (cm)')
plt.legend(title='Dieta')
plt.show()

# 2. Expectativa de Vida
plt.figure(figsize=(10, 6))
sns.histplot(data=df_monkeys, x='Expectativa de Vida (anos)', bins=20, kde=True, color='skyblue')
plt.title('Distribuição da Expectativa de Vida das Espécies de Macacos')
plt.xlabel('Expectativa de Vida (anos)')
plt.ylabel('Frequência')
plt.show()

plt.figure(figsize=(10, 6))
df_monkeys['Dieta'].value_counts().plot(kind='pie', autopct='%1.1f%%', startangle=140, colors=sns.color_palette('pastel'))
plt.title('Distribuição das Dietas entre as Espécies de Macacos')
plt.ylabel('')
plt.show()

"""```
#Modelo de Dados Dimensional
```
> As tabelas são utilizadas em modelos de banco de dados para armazenar informações referentes a atributos de interesse, facilitando assim as operações de análise e consulta.

Detalhes do que realizei:

<font color= cyano> Dimensão Espécie: <font color=white>
 Selecionei "Especie" do DataFrame original, removi possíveis duplicatas e resetou o índice para garantir uma sequência contínua. Adicionou uma coluna "EspecieID" que serve como chave primária para esta tabela de dimensão, atribuindo a cada espécie um identificador único.

<font color= cyano>Dimensão Dieta:<font color=white>  Criou uma nova tabela de dimensão para armazenar os tipos únicos de dietas presentes no conjunto de dados. Similar à tabela anterior, só adicionei uma coluna "DietaID" como chave primária.

<font color= cyano>Dimensão Localização:<font color=white> Nesta tabela, tratei a "Área de Distribuição" como uma dimensão, criando um registro único para cada valor diferente de área de distribuição. Uma coluna "LocalizacaoID" e adicionei para servir como chave primária.

<font color= cyano>Dimensão Grupo:<font color=white> O "Tamanho do Grupo" da mesma forma que as dimensões anteriores, garantindo que cada tamanho de grupo único tenha seu próprio registro e um identificador único na coluna "GrupoID".




"""

# Carregar o conjunto de dados
df_monkeys = pd.read_csv('monkey_species_data.csv')

# 1. Criação das Tabelas de Dimensão

# Dimensão Espécie
dim_especie = df_monkeys[['Especie']].drop_duplicates().reset_index(drop=True)
dim_especie['EspecieID'] = range(1, len(dim_especie) + 1)

# Dimensão Dieta
dim_dieta = pd.DataFrame({'Tipo': df_monkeys['Dieta'].unique()}).reset_index(drop=True)
dim_dieta['DietaID'] = range(1, len(dim_dieta) + 1)

# Dimensão Localização (neste caso, usaremos a Área de Distribuição como uma dimensão)
dim_localizacao = pd.DataFrame({'AreaDistribuicao': df_monkeys['Area de Distribuição (km²)'].unique()}).reset_index(drop=True)
dim_localizacao['LocalizacaoID'] = range(1, len(dim_localizacao) + 1)

# Dimensão Grupo
dim_grupo = pd.DataFrame({'TamanhoDoGrupo': df_monkeys['Tamanho do Grupo'].unique()}).reset_index(drop=True)
dim_grupo['GrupoID'] = range(1, len(dim_grupo) + 1)

dim_especie.head(), dim_dieta.head(), dim_localizacao.head(), dim_grupo.head()

# 2. Criação das Tabelas de Fatos

# Tabela de Fatos - Características Físicas
fato_caracteristicas_fisicas = df_monkeys[['Peso (kg)', 'Altura (cm)', 'Expectativa de Vida (anos)', 'Especie', 'Dieta']].copy()
fato_caracteristicas_fisicas = fato_caracteristicas_fisicas.merge(dim_especie, on='Especie', how='left')
fato_caracteristicas_fisicas = fato_caracteristicas_fisicas.merge(dim_dieta, left_on='Dieta', right_on='Tipo', how='left')
fato_caracteristicas_fisicas = fato_caracteristicas_fisicas.drop(['Especie', 'Dieta', 'Tipo'], axis=1)
fato_caracteristicas_fisicas.columns = ['PesoKg', 'AlturaCm', 'ExpectativaVidaAnos', 'EspecieID', 'DietaID']

# Tabela de Fatos - Informações Adicionais
fato_informacoes_adicionais = df_monkeys[['Tamanho do Grupo', 'Area de Distribuição (km²)']].copy()
fato_informacoes_adicionais = fato_informacoes_adicionais.merge(dim_grupo, left_on='Tamanho do Grupo', right_on='TamanhoDoGrupo', how='left')
fato_informacoes_adicionais = fato_informacoes_adicionais.merge(dim_localizacao, left_on='Area de Distribuição (km²)', right_on='AreaDistribuicao', how='left')
fato_informacoes_adicionais = fato_informacoes_adicionais.drop(['Tamanho do Grupo', 'Area de Distribuição (km²)', 'TamanhoDoGrupo', 'AreaDistribuicao'], axis=1)
fato_informacoes_adicionais.columns = ['GrupoID', 'LocalizacaoID']

fato_caracteristicas_fisicas.head(), fato_informacoes_adicionais.head()

!pip install kmodes

import pandas as pd
from kmodes.kmodes import KModes

# Supondo que df_monkeys_transformed seja o seu DataFrame
bin_vars = df_monkeys_transformed[['Expectativa de Vida Acima da Média', 'Peso Acima da Média', 'Tamanho do Grupo Acima da Média']]

# Convertendo as variáveis booleanas para inteiros
bin_vars = bin_vars.astype(int)

# Aplicando o K-Modes
km = KModes(n_clusters=3, init='Huang', n_init=5, verbose=1)
clusters = km.fit_predict(bin_vars)

# Adicionando os rótulos dos clusters ao DataFrame
df_monkeys_transformed['Cluster'] = clusters

# Mostrando os resultados
df_monkeys_transformed.head()

# Slicing: Selecionando dados para a espécie "Macaco-aranha-de-cara-vermelha"
slicing_result = df_monkeys[df_monkeys['Especie'] == 'Macaco-aranha-de-cara-vermelha']

# Dicing: Selecionando dados para macacos que pesam entre 10 e 20 kg e que vivem em grupos de tamanho entre 50 e 70
dicing_result = df_monkeys[(df_monkeys['Peso (kg)'] > 10) & (df_monkeys['Peso (kg)'] < 20) & (df_monkeys['Tamanho do Grupo'] > 50) & (df_monkeys['Tamanho do Grupo'] < 70)]

slicing_result, dicing_result

"""```
Slicing
```

Para a espécie "Macaco-aranha-de-cara-vermelha":



> <font color=cyano> Peso: <font color=white> 11.28 kg

> <font color= cyano> Altura:<font color=white> 94.49 cm
><font color= cyano> Expectativa de Vida:<font color=white> 16.27 anos

><font color= cyano> Tamanho do Grupo:<font color=white> 91

><font color= cyano> Área de Distribuição:<font color=white> 3569 km²

><font color= cyano> Dieta:<font color=white> Onívora

><font color= cyano> Expectativa de Vida Acima da Média:<font color=white> Não

><font color= cyano> Peso Acima da Média:<font color=white> Não

><font color= cyano> Tamanho do Grupo Acima da Média:<font color=white> Sim




```
Dicing
```


Foi encontrado três espécies de macacos que têm um peso entre 10 e 20 kg, vivem em grupos de tamanho entre 50 e 70, e suas respectivas informações são as seguintes:


```
Macaco-narigudo
```


> <font color=cyano> Peso:<font color=white> 15.55 kg

> <font color=cyano> Altura:<font color=white> 43.81 cm

> <font color=cyano> Expectativa de Vida:<font color=white> 24.54 anos

> <font color=cyano> Tamanho do Grupo: <font color=white>69

> <font color=cyano> Área de Distribuição:<font color=white> 4434 km²

> <font color=cyano> Dieta:<font color=white> Onívora

> <font color=cyano> Expectativa de Vida Acima da Média:<font color=white> Sim

> <font color=cyano> Peso Acima da Média:<font color=white> Não

> <font color=cyano> Tamanho do Grupo Acima da Média:<font color=white> Sim



```
Macaco-howl
```

> <font color=cyano>Peso:<font color=white> 12.79 kg

> <font color=cyano>Altura: <font color=white>99.71 cm

> <font color=cyano>Expectativa de Vida: <font color=white>31.25 anos

> <font color=cyano>Tamanho do Grupo:<font color=white> 66

> <font color=cyano>Área de Distribuição:<font color=white> 4339 km²

> <font color=cyano>Dieta:<font color=white> Onívora

> <font color=cyano>Expectativa de Vida Acima da Média: <font color=white>Sim

> <font color=cyano>Peso Acima da Média:<font color=white> Não

> <font color=cyano>Tamanho do Grupo Acima da Média:<font color=white> Sim

```
Macaco-lutung
```

> <font color=cyano>Peso:<font color=white> 18.41 kg

> <font color=cyano>Altura:<font color=white> 48.41 cm

> <font color=cyano>Expectativa de Vida:<font color=white> 19.59 anos

> <font color=cyano>Tamanho do Grupo:<font color=white> 69

> <font color=cyano>Área de Distribuição:<font color=white> 2146 km²

> <font color=cyano>Dieta:<font color=white> Frugívora

> <font color=cyano>Expectativa de Vida Acima da Média:<font color=white> Não

> <font color=cyano>Peso Acima da Média:<font color=white> Não

> <font color=cyano>Tamanho do Grupo Acima da Média:<font color=white> Sim
"""

# Definindo os caminhos dos arquivos a serem gerados
slicing_file_path = "slicing_result.csv"
dicing_file_path = "dicing_result.csv"

# Salvando os resultados em arquivos CSV
slicing_result.to_csv(slicing_file_path, index=False)
dicing_result.to_csv(dicing_file_path, index=False)

slicing_file_path, dicing_file_path